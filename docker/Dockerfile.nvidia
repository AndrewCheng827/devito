##############################################################
# This Dockerfile contains NVIDIA HPC SDK (nvc, cuda, OpenMPI) for Devito
##############################################################
ARG ver
ARG arch="nvc"

########################################################################
# Build base image with apt setup and common env
########################################################################
FROM python:3.9-slim-bullseye as sdk-base

ENV DEBIAN_FRONTEND noninteractive

# nodesource: nvdashboard requires nodejs>=10  
RUN echo 'deb [trusted=yes] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' > /etc/apt/sources.list.d/nvhpc.list
RUN apt-get update -y && apt-get install -y -q apt-utils curl wget vim

RUN curl -sL https://deb.nodesource.com/setup_12.x | bash - && \
    apt-get install -y -q \
        liblapack-dev libblas-dev \
        libibverbs-dev libmlx4-1 libmlx5-1 ibutils \
        nodejs ffmpeg \
        texlive-latex-extra texlive-fonts-recommended dvipng cm-super

# Compression
RUN wget -q -P /app/nvcomp_exts/ http://developer.download.nvidia.com/compute/nvcomp/2.2/local_installers/nvcomp_exts_x86_64_ubuntu18.04-2.2.tar.gz && \
    tar -xvf /app/nvcomp_exts/nvcomp_exts_x86_64_ubuntu18.04-2.2.tar.gz -C /app/nvcomp_exts && \
    apt-get update -y && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /app/nvcomp_exts/nvcomp*

ENV NVCOMP_EXTS_ROOT /app/nvcomp_exts/ubuntu18.04/11.6
ENV bitcomp_DIR $NVCOMP_EXTS_ROOT/lib/

# MPI_VER options 3,4,HPCX
ARG MPI_VER=HPCX

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility

# MPI ROOT USER DEFAULTS
ENV OMPI_ALLOW_RUN_AS_ROOT=1
ENV OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1
ENV OMPI_MCA_rmaps_base_oversubscribe=1
ENV OMPI_MCA_btl_base_warn_component_unused=0
ENV UCX_MEMTYPE_CACHE=no
ENV UCX_NET_DEVICES=all
ENV UCX_SHM_DEVICES=all
ENV UCX_ACC_DEVICES=all
ENV NCCL_UCX_RNDV_THRESH=0
ENV NCCL_UCX_RNDV_SCHEME=get_zcopy
ENV NCCL_PLUGIN_P2P=ucx
ENV MELLANOX_MOUNT_DRIVER=1

ENV UCX_TLS=rc_x,sm,shm,cuda_copy,gdr_copy,cuda_ipc
#For virtual environments and cloud
#ENV UCX_TLS=sm,shm,cuda_copy,cuda_ipc

#Â Install nvhpc. `nvhpc` is the alias for the latest avaialble version
ARG ver=nvhpc
RUN apt-get install -y -q ${ver}

# Make simlink for path setup since ENV doesn't accept shell commands.
RUN export NVARCH=$(ls opt/nvidia/hpc_sdk/Linux_x86_64/ | grep -v '\.') && \
    export CUDA_V=$(ls opt/nvidia/hpc_sdk/Linux_x86_64/${NVARCH}/cuda/ | grep '\.') && \
    ln -sf /opt/nvidia/hpc_sdk/Linux_x86_64/${NVARCH} /opt/nvhpc && \
    ln -sf /opt/nvidia/hpc_sdk/Linux_x86_64/${NVARCH}/cuda/${CUDA_V}/extras/CUPTI /opt/CUPTI

# Set base path based on version
ENV HPCSDK_HOME=/opt/nvhpc
ENV HPCSDK_CUPTI=/opt/CUPTI

# required for nvidia-docker v1
RUN echo "$HPCSDK_HOME/cuda/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "$HPCSDK_HOME/cuda/lib64" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "$HPCSDK_HOME/compilers/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "$HPCSDK_HOME/comm_libs/mpi/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "$HPCSDK_CUPTI/lib64" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "$HPCSDK_HOME/math_libs/lib64" >> /etc/ld.so.conf.d/nvidia.conf    
    
# Compiler, CUDA, and Library paths
ENV CUDA_HOME $HPCSDK_HOME/cuda
ENV CUDA_ROOT $HPCSDK_HOME/cuda/bin
ENV PATH $HPCSDK_HOME/compilers/bin:$HPCSDK_HOME/cuda/bin:$HPCSDK_HOME/comm_libs/mpi/bin:${PATH}
ENV LD_LIBRARY_PATH $HPCSDK_HOME/cuda/lib:$HPCSDK_HOME/cuda/lib64:$HPCSDK_HOME/compilers/lib:$HPCSDK_HOME/math_libs/lib64:$HPCSDK_HOME/comm_libs/mpi/lib:$HPCSDK_CUPTI/lib64:bitcomp_DIR:${LD_LIBRARY_PATH}
ENV CPATH $HPCSDK_HOME/comm_libs/mpi/include:${CPATH}

# MPI 3
RUN if [ "x$MPI_VER" = "x4" ]; then \
        rm -f  $HPCSDK_HOME/comm_libs/mpi && \
        ln -sf $HPCSDK_HOME/comm_libs/openmpi4/openmpi-4.0.5 \
               $HPCSDK_HOME/comm_libs/mpi ; \
    fi;  \
    if [ "x$MPI_VER" = "HPCX" ]; then \
        rm -f  $HPCSDK_HOME/comm_libs/mpi && \
        ln -sf $HPCSDK_HOME/comm_libs/hpcx/latest/ompi \
               $HPCSDK_HOME/comm_libs/mpi ; \
    fi;

# Install python nvidia dependencies
RUN python3 -m venv /venv && \
    /venv/bin/pip install --no-cache-dir --upgrade pip && \
    /venv/bin/pip install --no-cache-dir -r https://raw.githubusercontent.com/devitocodes/devito/master/requirements-nvidia.txt && \
    CFLAGS=-noswitcherror /venv/bin/pip install --no-cache-dir mpi4py && \
    # Install jupyter and setup nvidia configs.
    /venv/bin/pip install --no-cache-dir jupyter && \
    /venv/bin/jupyter serverextension enable dask_labextension && \
    # /venv/bin/jupyter lab workspaces import /app/nvdashboard.json & \
    rm -rf ~/.cache/pip

########################################################################
# NVC config
########################################################################
FROM sdk-base as nvc

# Make devito env vars file and extras
ADD docker/nvdashboard.json /app/nvdashboard.json

ENV DEVITO_ARCH="nvc"
ENV DEVITO_PLATFORM="nvidiaX"
ENV DEVITO_LANGUAGE="openacc"

########################################################################
# Build clang 14
########################################################################
# Thid will only trigger if arch is clang since the final stage depends on it
FROM sdk-base as clang

## Install clang requirements
RUN apt-get -y update && apt-get install -y -q libelf-dev libffi-dev cmake git

## Install clang 14 (latest stable release)
WORKDIR /
RUN git clone -b llvmorg-14.0.5 --depth 1 https://github.com/llvm/llvm-project.git
WORKDIR /llvm-project
RUN mkdir build
WORKDIR /llvm-project/build
RUN cmake ../llvm/ -DCMAKE_BUILD_TYPE=Release \
    -DLLVM_TARGETS_TO_BUILD="X86;NVPTX" \
    -DLIBOMPTARGET_NVPTX_COMPUTE_CAPABILITIES=all \
    -DLLVM_ENABLE_PROJECTS="clang" \
    -DLLVM_ENABLE_RUNTIMES="openmp" \
    -DCMAKE_INSTALL_PREFIX=/llvm
RUN make -j $(( $(lscpu | awk '/^Socket\(s\)/{ print $2 }') * $(lscpu | awk '/^Core\(s\) per socket/{ print $4 }') ))
RUN make install
WORKDIR /
RUN rm -rf llvm-project
ENV PATH /llvm/bin:${PATH}
ENV LD_LIBRARY_PATH /llvm/lib:${LD_LIBRARY_PATH}

# Recompile mpi4py with clang
ENV OMPI_CC="clang"
RUN /venv/bin/pip install --force-reinstall --no-cache-dir mpi4py

# Devito env vars
ENV DEVITO_ARCH="clang"
ENV DEVITO_PLATFORM="nvidiaX"
ENV DEVITO_LANGUAGE="openmp"

########################################################################
# Final image
########################################################################
FROM ${arch} as final

RUN rm -rf /var/lib/apt/lists/* \
	&& apt-get clean

EXPOSE 8888
CMD ["/bin/bash"]